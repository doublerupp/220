;modified POP to store value in R6.
;read comments
;
.ORIG x3000
		
SPACE		.FILL x0020
NEW_LINE	.FILL x000A
CHAR_RETURN	.FILL x000D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;if ( push onto stack if ) pop from stack and check if popped value is (
;input - R0 holds the input
;output - R5 set to -1 if unbalanced. else not modified.
IS_BALANCED
	GETC	;Read character from keyboard to monitor
	AND R5, R5, #0; 
	ADD R5, R5, #-1; assume set is unbalanced to start
	LD R6, NEG_NEWLINE
	ADD R6, R0, R6	; compare additive inverse of newline to character inputted 
	BRz DONE	;halt program if new line is entered
	LD R6, NEG_SPACE
	ADD R6, R0, R6	; compare input to space
	BRz IS_BALANCED	;ignore if a space is entered
	OUT	;echo input to screen if not space or newline
	LD R6, NEG_OPEN	
	ADD R6, R6, R0	;compare input to additive inverse of '('
	BRz OPEN_ENTERED
CLOSED_ENTERED
	JSR POP	;pop from stack if ')' is entered
	ADD R5, R5, #-1	;set cc for R5 to check for underflow
	BRz STACK_UNDERFLOW	;halt program if underflow is detected
	LD R6, STACK_START
	LD R1, STACK_TOP	;load values of stack top and start into temporary registers
	NOT R6, R6
	ADD R6, R6, #1
	ADD R6, R6, R1	;check to see if stack is empty
	BRz EMPTY_STACK	
	BRnzp IS_BALANCED	; accept next input if stack is empty
EMPTY_STACK
	AND R5, R5, #0	;set R5 to 1 if the input is balanced
	ADD R5, R5, #1
	BRnzp IS_BALANCED	   
OPEN_ENTERED
	JSR PUSH	; push to stack if '(' is entered
	ADD R5, R5, #-1	; set cc to examine R5
	BRz STACK_OVERFLOW
	BRnzp IS_BALANCED	; accept new input once push to stack is complete
STACK_OVERFLOW
	AND R5, R5, #0	;set R5 to -1 if overflow is detected
	ADD R5, R5, #-1
	BRnzp DONE	;Halt the program if overflow is detected
STACK_UNDERFLOW
	AND R5, R5, #0	;set R5 to -1 if underflow is detected
	ADD R5, R5, #-1
	BRnzp DONE	;Halt the program if underflow is detected
NEG_OPEN .FILL xFFD8
;IN:R0, OUT:R5 (0-success, 1-fail/overflow)
;R3: STACK_END R4: STACK_TOP
;
PUSH	
	ST R3, PUSH_SaveR3	;save R3
	ST R4, PUSH_SaveR4	;save R4
	AND R5, R5, #0		;
	LD R3, STACK_END	;
	LD R4, STACK_TOP	;
	ADD R3, R3, #-1		;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz OVERFLOW		;stack is full
	STR R0, R4, #0		;no overflow, store value in the stack
	ADD R4, R4, #-1		;move top of the stack
	ST R4, STACK_TOP	;store top of stack pointer
	BRnzp DONE_PUSH		;
OVERFLOW
	ADD R5, R5, #1		;
DONE_PUSH
	LD R3, PUSH_SaveR3	;
	LD R4, PUSH_SaveR4	;
	RET


PUSH_SaveR3	.BLKW #1	;
PUSH_SaveR4	.BLKW #1	;


;OUT: R0, OUT R5 (0-success, 1-fail/underflow)
;R3 STACK_START R4 STACK_TOP
;
POP
        ST R3, POP_SaveR3       ;save R3
        ST R4, POP_SaveR4       ;save R3
        AND R5, R5, #0          ;clear R5
        LD R3, STACK_START      ;
        LD R4, STACK_TOP        ;
        NOT R3, R3              ;
        ADD R3, R3, #1          ;
        ADD R3, R3, R4          ;
        BRz UNDERFLOW           ;
        ADD R4, R4, #1          ;
        LDR R0, R4, #0          ;
        ST R4, STACK_TOP        ;
        BRnzp DONE_POP          ;
UNDERFLOW
        ADD R5, R5, #1          ;
DONE_POP
        LD R3, POP_SaveR3       ;
        LD R4, POP_SaveR4       ;
        RET


POP_SaveR3	.BLKW #1	;
POP_SaveR4	.BLKW #1	;
STACK_END	.FILL x3FF0	;
STACK_START	.FILL x4000	;
STACK_TOP	.FILL x4000	;

FORWARD_P	.FILL x0028	;store '('
REVERSE_P	.FILL x0029	;store ')'


NEG_SPACE	.FILL xFFE0	;store additive invserse of space
NEG_NEWLINE	.FILL xFFF6	;store additive inverse of newline 

	DONE HALT
.END

